// Generated by CoffeeScript 1.11.1
(function() {
  var ChildProcess, Command, GetFeaturesCommand, Promise,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Promise = require('bluebird');

  Command = require('./Command');

  ChildProcess = require('child_process');

  GetFeaturesCommand = (function(superClass) {
    extend(GetFeaturesCommand, superClass);

    function GetFeaturesCommand() {
      return GetFeaturesCommand.__super__.constructor.apply(this, arguments);
    }

    GetFeaturesCommand.prototype.execute = function(serial, callback) {
      var action, isSuccess, resolver, returnValue, spawn;
      resolver = Promise.defer();
      spawn = ChildProcess.spawn;
      action = spawn(this.cmd, this.args);
      isSuccess = null;
      returnValue = [];
      action.stdout.on('data', function(data) {
        var featuresStr;
        featuresStr = new Buffer(data).toString().trim();
        featuresStr.trim().split('\n').forEach(function(featrue) {
          return returnValue.push(featrue.slice(8));
        });
        if (returnValue.length > 1) {
          return resolver.resolve(returnValue);
        }
      });
      action.stderr.on('data', function(data) {
        var errorInfo;
        returnValue = [];
        errorInfo = new Buffer(data).toString();
        if (errorInfo !== null) {
          errorInfo = errorInfo.replace(/\n/g, '.');
        }
        isSuccess = new Error(errorInfo);
        return resolver.reject(isSuccess);
      });
      action.on('close', function(data) {
        isSuccess = true;
        return resolver.resolve('close');
      });
      return resolver.promise["finally"](function() {
        return callback(isSuccess, returnValue);
      });
    };

    return GetFeaturesCommand;

  })(Command);

  module.exports = GetFeaturesCommand;

}).call(this);

//# sourceMappingURL=GetFeaturesCommand.js.map
